#!/usr/bin/env bash
# Automatic tmux session support
# 
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2010-12-16
# Requires: bpm.defaults bpm.exit-hooks
# Conflicts: screen
################################################################################

bash_plugin_login() {
    bash_default auto_tmux_env_root /tmp/auto-tmux.${SUDO_USER:-$LOGNAME}
    # a shorthand for enabling auto-tmux
    atmux() { auto_tmux_enable=true exec bash -l; }
    # load values from tmux environment snapshot
    atmux-reset() {
        [ -f "$auto_tmux_link" ] || return
        . "$auto_tmux_link"
    }
    # save current environment to tmux snapshot
    atmux-save() {
        [ -f "$auto_tmux_link" ] || return
        chmod +w "$auto_tmux_link"
        local n=
        for n in SSH_CLIENT SSH_CONNECTION SSH_TTY \
            SSH_AUTH_SOCK SSH_AGENT_PID \
            XAUTHORITY DISPLAY SESSION_MANAGER
        do  local v=${!n}
            if [ -n "$v" ]; then
                echo "export $n='${v//"'"/"'\\''"}'"
            else
                echo "unset $n"
            fi
        done >"$auto_tmux_link" 2>/dev/null
        chmod a-w "$auto_tmux_link"
    }
    if ! type tmux &>/dev/null; then
        # we can't do much if tmux is not available
        if ! $bash_autoload; then
            echo "auto-tmux: not found from PATH" >&2
        fi
        unset atmux
    elif [ -z "$SSH_CONNECTION" -a -z "$auto_tmux_enable" ]; then
        # local shell, but tmux wasn't enabled
        # skip attaching to the tmux session
        unset -v auto_tmux_env_root
        unset -f atmux-{reset,save}
    elif [ -n "$TMUX" ]; then
        # working inside tmux, prepare stuffs
        auto_tmux_link="$auto_tmux_env_root/.$$"
        unset TERM_PROGRAM TERM_PROGRAM_VERSION
        unset atmux

        # set useful tmux related commands
        -atmux-all() {
            # all connections
            (cd "$auto_tmux_env_root" && \ls -t) 2>/dev/null
        }
        -atmux-alive() {
            # live connections
            (cd "$auto_tmux_env_root" &&
            \ls -t $(ps -o pid= -p `-atmux-all`)) 2>/dev/null
        }
        -atmux-current() {
            # current connection
            readlink "$auto_tmux_link"
        }
        -atmux-ok() {
            [ -e "$auto_tmux_link" ]
        }
        -atmux-poll() {
            -atmux-ok || atmux-use
        }
        atmux-ls() {
            local c=
            for c in `-atmux-alive`; do
                echo "= $([ $c = `-atmux-current` ] && echo \#)$c ="
                cat "$auto_tmux_env_root/$c"
            done
        }
        atmux-use() {
            local conn=$1
            # determine $conn unless given
            if [ -z "$conn" ]; then
                if -atmux-ok; then
                    # cycle through connections
                    conn=$(-atmux-alive |
                        grep -A1 ^`-atmux-current`$ | tail -n +2)
                    [ -n "$conn" ] || conn=`-atmux-alive | head -1`
                else
                    # use the most recent one
                    conn=`-atmux-alive | head -1`
                fi
            fi
            # use $conn
            if [ -n "$conn" ]; then
                if { (cd "$auto_tmux_env_root" && ln -sf $conn "$auto_tmux_link") &&
                    atmux-reset; } 2>/dev/null; then
                    echo "auto-tmux: using connection #$conn"
                else
                    echo "auto-tmux: cannot use $conn"
                fi
            else
                echo "auto-tmux: no connection available"
                return 1
            fi
        }
        atmux-only() {
            -atmux-poll || return 1
            local pids=$(-atmux-alive | grep -v ^`-atmux-current`$)
            if [ -n "$pids" ]; then
                kill -HUP $pids
                (cd "$auto_tmux_env_root" && rm -f $pids)
            fi 2>/dev/null
        }
        -atmux-cleanup() {
            # remove stale connections
            local patt= pid=
            for pid in $(-atmux-alive); do patt+="${patt:+\\|}$pid"; done
            local stalePids=$(-atmux-all | grep -v "^\\($patt\\)$")
            (cd "$auto_tmux_env_root" && rm -f $stalePids)
            # remove stale links
            find -L "$auto_tmux_env_root" -type l -exec rm -f {} \;
        }
        auto_tmux_last_pwd=
        -atmux-sync-default-path() {
            if [ x"$PWD" != x"$auto_tmux_last_pwd" ]; then
                auto_tmux_last_pwd=$PWD
                tmux set default-path "$PWD" |:
            fi
        }
        
        # prepare hooks for prompt, cleanup
        bash_insert_prompt -atmux-sync-default-path
        bash_insert_prompt -atmux-poll
        bash_add_unloader "rm -f \"$auto_tmux_link\""
    else
        # working outside tmux,
        # create a environment snapshot for shells inside tmux
        if ! [ -d "$auto_tmux_env_root" ]; then
            mkdir -p "$auto_tmux_env_root"
            chmod a=,u=rwx "$auto_tmux_env_root"
        fi
        local conn=$$
        local auto_tmux_env="$auto_tmux_env_root/$conn"
        rm -f "$auto_tmux_env"
        touch "$auto_tmux_env"
        chmod a=,u=rw "$auto_tmux_env"
        auto_tmux_link=$auto_tmux_env atmux-save
        # before exiting, clean it up
        bash_add_unloader "rm -f \"$auto_tmux_env\""
        
        echo "auto-tmux: connection #$conn"
        local key=
        getkey() {
            key=
            local intr=false
            trap "intr=true" INT
            read -n 1 -t 1 -s key
            key=${key#[ 	]}
            trap - INT
            ! $intr || key=q
        }
        
        getkey
        # new session should be started if there are no sessions yet
        [ -n "$key" ] || [ $(tmux list-sessions 2>/dev/null | wc -l) -gt 0 ] || key=n
        # take action depending on user input
        case $key in
            [nN]) # start a new one per request
                echo "auto-tmux: starting new session"
                tmux -2 new-session
                ;;
            "") # otherwise, default is to resume
                echo "auto-tmux: resuming previous session"
                tmux -2 attach-session
                ;;
            *) # if any other key was pressed, abort
                echo "auto-tmux: aborted"
                return
                ;;
        esac
        
        # after tmux session, give a chance to visit the shell
        getkey
        if [ -n "$key" ]; then
            echo "auto-tmux: finished"
            return
        fi
        
        # exit the shell
        exit
    fi
}

# vim:et:ts=8:sw=4:sts=4
